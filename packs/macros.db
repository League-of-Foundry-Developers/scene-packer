{"name":"Detach Scene from Scene Packer instance","type":"script","author":"MRUsyvFBYyl6GZtk","img":"icons/svg/hanging-sign.svg","scope":"global","command":"// This macro will detach a scene from a Scene Packer instance, allowing you to\n// choose a different module to pack the scene against.\n// Use this macro if you accidentally pack a scene against the wrong module.\n\nconst sceneName = 'Your scene name';\ngame.scenes.filter(s => s.name === sceneName).forEach(s => s.setFlag('scene-packer', 'source-module', null))","folder":null,"sort":0,"permission":{"default":0,"MRUsyvFBYyl6GZtk":3},"flags":{"core":{"sourceId":"Macro.CPhN32K7a5EtMlBH"},"scene-packer":{"sourceId":"Macro.CPhN32K7a5EtMlBH"}},"_id":"1nFGsw2WJuSB10FC"}
{"_id":"D0GsPqV3zglJ9w7V","name":"Clean up #[CF_tempEntity] entries","type":"script","author":"ajyvWN29UcpExc6d","img":"icons/svg/acid.svg","scope":"global","command":"// Prompt to remove \"#[CF_tempEntity]\" items from the world,\n// in the case where they have been imported when the\n// Compendium Folders module is not active.\n\nlet cfTempEntity = '#[CF_tempEntity]';\nfor (const entity of [\n  {name: 'scenes', collection: game.scenes},\n  {name: 'actors', collection: game.actors},\n  {name: 'items', collection: game.items},\n  {name: 'journals', collection: game.journal},\n  {name: 'macros', collection: game.macros},\n  {name: 'playlists', collection: game.playlists},\n  {name: 'roll tables', collection: game.tables},\n]) {\n  const found = entity.collection.filter(e => e.name === cfTempEntity);\n  if (found.length) {\n    Dialog.confirm({\n      title: `Delete ${found.length} ${entity.name}?`,\n      content: `<p>Do you want to <strong>delete</strong> ${found.length} ${entity.name} with the name <code style=\"display:inline-block;\">${cfTempEntity}</code> from your world?</p>`,\n      yes: () => {\n        for (const foundElement of found) {\n          console.log(`Deleting ${foundElement.id} from ${entity.name}`);\n          const document = entity.collection.get(foundElement.id);\n          if (document) {\n            document.delete();\n          }\n        }\n      }\n    });\n  } else {\n    console.log(`No ${entity.name} with the name \"${cfTempEntity}\" found.`);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"ajyvWN29UcpExc6d":3},"flags":{"core":{"sourceId":"Macro.Vseli28UPwE5waan"},"scene-packer":{"sourceId":"Macro.Vseli28UPwE5waan"}}}
{"_id":"DMRaZaBX7hr2TNoZ","name":"Show scene performance report","permission":{"default":0,"PeG0c6MgW8W2NzFs":3},"type":"script","flags":{"core":{"sourceId":"Macro.frlsbESCLKNBjrYG"}},"scope":"global","command":"// This macro shows a performance report that details the\n// complexity in a Scene. It can be used as a guide to help\n// determine how a Scene may perform for players.\n\nScenePacker.ShowPerformanceReport();","author":"PeG0c6MgW8W2NzFs","img":"icons/svg/upgrade.svg","actorIds":[]}
{"_id":"IeiuU5QSNgwJygTL","name":"Relink compendium entries","type":"script","author":"PeG0c6MgW8W2NzFs","img":"icons/svg/book.svg","scope":"global","command":"// This macro will let you choose your module and will check\n// each Journal and Item in your module's compendium in an\n// attempt to update the link to the equivalent compendium\n// version.\n//\n// Asks you whether you want to operate in a \"dry run\" mode,\n// where no changes are made. Check the Console for output.\n\nScenePacker.PromptRelinkJournalEntries()","folder":null,"sort":0,"permission":{"default":0,"PeG0c6MgW8W2NzFs":3},"flags":{"core":{"sourceId":"Macro.1vPAJ3r886Km4CSi"}}}
{"name":"Bulk replace asset references","type":"script","author":"MRUsyvFBYyl6GZtk","img":"icons/svg/lightning.svg","scope":"global","command":"/*\n * Bulk replace asset references\n */\n(async () => {\n  Dialog.prompt({\n    title: \"Bulk replace asset references\",\n    content:\n      '<p>This tool will search for asset references <strong>within your world</strong> that start with the provided value and replace that portion with the other provided value.</p><p><label>Find (case sensitive): <input type=\"text\" name=\"find\" placeholder=\"some/original/path/\"></label></p><p><label>Replace (case sensitive): <input type=\"text\" name=\"replace\" placeholder=\"your/new/path/\"></label></p><hr><p><label><input type=\"checkbox\"> Save changes?</label></p><p>Leaving this unchecked will operate in a \"dry run\" mode, where changes are only output to the console (F12).</p><hr>',\n    label: \"Bulk replace\",\n    callback: async (html) => {\n      const find = html.find('input[name=\"find\"]').val();\n      const replace = html.find('input[name=\"replace\"]').val();\n      const dryRun = !html.find('input[type=\"checkbox\"]')[0].checked;\n      if (!find || !replace) {\n        console.warn(\"Bulk replace asset references: No value provided\");\n        return;\n      }\n      const domParser = new DOMParser();\n\n      console.groupCollapsed(\"Bulk replace scenes\");\n      for (const scene of game.scenes) {\n        if (scene.data.img?.startsWith(find)) {\n          console.log(\n            `${scene.name}.img: ${scene.data.img} => ${scene.data.img.replace(\n              find,\n              replace\n            )}`\n          );\n          if (!dryRun) {\n            await scene.update({ img: scene.data.img.replace(find, replace) });\n          }\n        }\n        if (scene.data.foreground?.startsWith(find)) {\n          console.log(\n            `${scene.name}.foreground: ${\n              scene.data.foreground\n            } => ${scene.data.foreground.replace(find, replace)}`\n          );\n          if (!dryRun) {\n            await scene.update({\n              img: scene.data.foreground.replace(find, replace),\n            });\n          }\n        }\n        const tokenUpdates = [];\n        let shownGroup = false;\n        for (const token of scene.tokens) {\n          if (token.data.img?.startsWith(find)) {\n            if (!shownGroup) {\n              console.groupCollapsed(`${scene.name} tokens`);\n              shownGroup = true;\n            }\n            console.log(\n              `${token.name}.img: ${token.data.img} => ${token.data.img.replace(\n                find,\n                replace\n              )}`\n            );\n            tokenUpdates.push({\n              _id: token.id,\n              img: token.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (shownGroup) {\n          console.groupEnd();\n        }\n        if (tokenUpdates.length && !dryRun) {\n          await scene.updateEmbeddedDocuments(\"Token\", tokenUpdates);\n        }\n        const tileUpdates = [];\n        shownGroup = false;\n        for (const tile of scene.tiles) {\n          if (tile.data.img?.startsWith(find)) {\n            if (!shownGroup) {\n              console.groupCollapsed(`${scene.name} tiles`);\n              shownGroup = true;\n            }\n            console.log(\n              `tile.img: ${tile.data.img} => ${tile.data.img.replace(\n                find,\n                replace\n              )}`\n            );\n            tileUpdates.push({\n              _id: tile.id,\n              img: tile.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (shownGroup) {\n          console.groupEnd();\n        }\n        if (tileUpdates.length && !dryRun) {\n          await scene.updateEmbeddedDocuments(\"Tile\", tileUpdates);\n        }\n      }\n      console.groupEnd();\n\n      console.groupCollapsed(\"Bulk replace actors\");\n      for (const actor of game.actors) {\n        if (actor.data.img?.startsWith(find)) {\n          console.log(\n            `${actor.name}.img: ${actor.data.img} => ${actor.data.img.replace(\n              find,\n              replace\n            )}`\n          );\n          if (!dryRun)\n            await actor.update({ img: actor.data.img.replace(find, replace) });\n        }\n        if (actor.data.token.img?.startsWith(find)) {\n          console.log(\n            `${actor.data.token.name}.token.img: ${\n              actor.data.token.img\n            } => ${actor.data.token.img.replace(find, replace)}`\n          );\n          if (!dryRun) {\n            await actor.update({\n              token: { img: actor.data.token.img.replace(find, replace) },\n            });\n          }\n        }\n        const itemUpdates = [];\n        shownGroup = false;\n        for (const item of actor.data.items) {\n          if (item.data.img?.startsWith(find)) {\n            if (!shownGroup) {\n              console.groupCollapsed(`${actor.name} tokens`);\n              shownGroup = true;\n            }\n            console.log(\n              `${actor.name} ${item.name} item.img: ${\n                item.data.img\n              } => ${item.data.img.replace(find, replace)}`\n            );\n            itemUpdates.push({\n              _id: item.id,\n              img: item.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (shownGroup) {\n          console.groupEnd();\n        }\n        if (itemUpdates.length && !dryRun) {\n          await actor.updateEmbeddedDocuments(\"Item\", itemUpdates);\n        }\n        const effectUpdates = [];\n        shownGroup = false;\n        for (const effect of actor.data.effects) {\n          if (effect.data.img?.startsWith(find)) {\n            if (!shownGroup) {\n              console.groupCollapsed(`${actor.name} effects`);\n              shownGroup = true;\n            }\n            console.log(\n              `${actor.name} ${effect.name} effect.img: ${\n                effect.data.img\n              } => ${effect.data.img.replace(find, replace)}`\n            );\n            effectUpdates.push({\n              _id: effect.id,\n              img: effect.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (shownGroup) {\n          console.groupEnd();\n        }\n        if (effectUpdates.length && !dryRun) {\n          await actor.updateEmbeddedDocuments(\"ActiveEffect\", effectUpdates);\n        }\n      }\n      console.groupEnd();\n\n      console.groupCollapsed(\"Bulk replace items\");\n      for (const item of game.items) {\n        if (item.data.img?.startsWith(find)) {\n          console.log(\n            `${item.name}.img: ${item.data.img} => ${item.data.img.replace(\n              find,\n              replace\n            )}`\n          );\n          if (!dryRun) {\n            await item.update({ img: item.data.img.replace(find, replace) });\n          }\n        }\n        const effectUpdates = [];\n        shownGroup = false;\n        for (const effect of item.data.effects) {\n          if (effect.data.img?.startsWith(find)) {\n            if (!shownGroup) {\n              console.groupCollapsed(`${item.name} effects`);\n              shownGroup = true;\n            }\n            console.log(\n              `${item.name} ${effect.name} effect.img: ${\n                effect.data.img\n              } => ${effect.data.img.replace(find, replace)}`\n            );\n            effectUpdates.push({\n              _id: effect.id,\n              img: effect.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (shownGroup) {\n          console.groupEnd();\n        }\n        if (effectUpdates.length && !dryRun) {\n          await item.updateEmbeddedDocuments(\"ActiveEffect\", effectUpdates);\n        }\n      }\n      console.groupEnd();\n\n      console.groupCollapsed(\"Bulk replace journals\");\n      for (const journal of game.journal) {\n        if (journal.data.img?.startsWith(find)) {\n          console.log(\n            `${journal.name}.img: ${\n              journal.data.img\n            } => ${journal.data.img.replace(find, replace)}`\n          );\n          if (!dryRun) {\n            await journal.update({\n              img: journal.data.img.replace(find, replace),\n            });\n          }\n        }\n        if (journal.data.content) {\n          let hasContentUpdate = false;\n          const doc = domParser.parseFromString(journal.data.content, 'text/html');\n          for (const link of doc.getElementsByTagName('a')) {\n            if (link.href?.startsWith(find)) {\n              console.log(\n                `${journal.name}.link: ${\n                  link.href\n                } => ${link.href.replace(find, replace)}`\n              );\n              link.href.replace(find, replace);\n              hasContentUpdate = true;\n            }\n          }\n          for (const link of doc.getElementsByTagName('img')) {\n            if (link.src?.startsWith(find)) {\n              console.log(\n                `${journal.name}.img: ${\n                  link.src\n                } => ${link.src.replace(find, replace)}`\n              );\n              link.src.replace(find, replace);\n              hasContentUpdate = true;\n            }\n          }\n\n          if (hasContentUpdate && !dryRun) {\n            await journal.update({\n              content: doc.body.innerHTML,\n            });\n          }\n        }\n      }\n      console.groupEnd();\n\n      console.groupCollapsed(\"Bulk replace playlists\");\n      for (const playlist of game.playlists) {\n        const soundUpdates = [];\n        for (const sound of playlist.data?.sounds) {\n          if (sound.data.path?.startsWith(find)) {\n            console.log(\n              `${sound.name}.img: ${\n                sound.data.path\n              } => ${sound.data.path.replace(find, replace)}`\n            );\n            soundUpdates.push({\n              _id: sound.id,\n              path: sound.data.path.replace(find, replace),\n            });\n          }\n        }\n        if (soundUpdates.length && !dryRun) {\n          await playlist.updateEmbeddedDocuments(\"PlaylistSound\", soundUpdates);\n        }\n      }\n      console.groupEnd();\n    },\n  });\n})();","folder":null,"sort":0,"permission":{"default":0,"MRUsyvFBYyl6GZtk":3},"flags":{"core":{"sourceId":"Macro.YpZnc0IWBVWtIoJO"},"scene-packer":{"sourceId":"Macro.YpZnc0IWBVWtIoJO"}},"_id":"L2BGaj7HBxJHOSkM"}
{"_id":"OUvevMPeaRKzQBVu","name":"Bulk Lock/Unlock compendiums","type":"script","author":"MRUsyvFBYyl6GZtk","img":"icons/svg/door-locked-outline.svg","scope":"global","command":"// This macro allows you to bulk lock or unlock compendiums\n// as a way to save time.\n(() => {\n  if (!game.user.isGM) {\n    return;\n  }\n\n  let activeModules = game.data.modules\n    .filter((m) => m.active && m.packs?.length)\n    .map((m) => m.id);\n  if (!activeModules.length) {\n    ui.notifications.info(\n      \"There are no modules with compendium packs in this world.\"\n    );\n    return;\n  }\n  let hasWorldCompendiums = !!game.packs.find(p => p.metadata.package === 'world')\n  let content = `<p>Bulk Lock/Unlock compendium packs that belong to the following module:</p>`;\n  content += '<select id=\"module-name\">';\n  activeModules.forEach((m) => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  if (hasWorldCompendiums) {\n    content += `<option value=\"world\">world</option>`;\n  }\n  content += \"</select>\";\n  content += \"<p><hr></p>\";\n  let d = new Dialog({\n    title: \"Bulk Lock/Unlock compendium packs\",\n    content: content,\n    buttons: {\n      lock: {\n        icon: '<i class=\"fas fa-lock\"></i>',\n        label: game.i18n.localize(\"Lock\"),\n        callback: async (html) => {\n          await setState(true, html.find(\"#module-name\")[0].value);\n        },\n      },\n      unlock: {\n        icon: '<i class=\"fas fa-unlock\"></i>',\n        label: game.i18n.localize(\"Unlock\"),\n        callback: async (html) => {\n          await setState(false, html.find(\"#module-name\")[0].value);\n        },\n      },\n      cancel: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: game.i18n.localize(\"Cancel\"),\n      },\n    },\n  });\n  d.render(true);\n\n  async function setState(locked, moduleName) {\n    locked = !!locked;\n    const compendiums = game.packs.filter(\n      (p) => p.metadata.package === moduleName\n    );\n    const settings = {};\n    compendiums.forEach((p) => {\n      settings[`${p.metadata.package}.${p.metadata.name}`] = { locked };\n    });\n    if (Object.keys(settings).length) {\n      let key = locked\n                ? \"Locking compendiums: {list}\"\n                : \"Unlocking compendiums: {list}\";\n      ui.notifications.info(\n        game.i18n.format(key, {\n          list: Object.keys(settings).join(\", \"),\n          locked: locked,\n        })\n      );\n      let configSetting =\n        Compendium?.CONFIG_SETTING ||\n        CompendiumCollection?.CONFIG_SETTING ||\n        \"compendiumConfiguration\";\n      await game.settings.set(\"core\", configSetting, settings);\n    }\n  }\n})();","folder":null,"sort":0,"permission":{"default":0,"MRUsyvFBYyl6GZtk":3},"flags":{"scene-packer":{"hash":"9526d9354098381b75dbb4a47300957cbdf45c4b","sourceId":"Macro.cEYqc2chS1vOpIPo"},"core":{"sourceId":"Macro.cEYqc2chS1vOpIPo"}}}
{"name":"Show Scenes Worth Packing","type":"script","author":"XKmxUPdkcWMuKdfu","img":"icons/svg/eye.svg","scope":"global","command":"// This macro will check your world Scenes to see whether\n// there is any data that would benefit from being Packed.\n\nScenePacker.ShowScenesWorthPacking();","folder":null,"sort":0,"permission":{"default":0,"XKmxUPdkcWMuKdfu":3},"flags":{"core":{"sourceId":"Macro.zo5hb9xMPyiUEqrE"}},"_id":"P3UkVzGKhtwAcpRT"}
{"name":"Bulk pack scenes","type":"script","author":"FYKEkGQDWeedzh8v","img":"icons/svg/barrel.svg","scope":"global","command":"// This macro will pack/repack all scenes in the requested scene folder.\n\nDialog.prompt({\n  title: 'Pack all Scenes in a folder',\n  content: '<label>Enter folder name (case sensitive): <input type=\"text\" name=\"folder\"><hr></label>',\n  label: 'Pack scenes',\n  callback: async (html) => {\n    let folderName = html.find('input').val();\n    if (!folderName) {\n      return;\n    }\n    let process = async (f, instance) => {\n      for (const scene of f.content) {\n        await instance.ClearPackedData(scene);\n        await instance.PackScene(scene);\n      }\n      for (const child of f.children) {\n        await process(child, instance);\n      }\n    }\n    const folder = game.folders.find(f => f.name === folderName && f.type === 'Scene');\n    if (folder) {\n      ScenePacker.PromptForInstance().then(async instance => {\n        await process(folder, instance);\n      })\n    } else {\n      console.error(`Could not find a Scene folder with the name \"${folderName}\"`);\n    }\n  },\n});","folder":null,"sort":0,"permission":{"default":0,"FYKEkGQDWeedzh8v":3},"flags":{"core":{"sourceId":"Macro.oYPUPtEzf8Dp90ZS"},"scene-packer":{"sourceId":"Macro.oYPUPtEzf8Dp90ZS"}},"_id":"YsJZfzxws5UeXYJC"}
{"name":"Bulk Unpack Scenes","type":"script","author":"MRUsyvFBYyl6GZtk","img":"icons/svg/up.svg","scope":"global","command":"// This macro will unpack any scenes in your world that have\n// packed data. It can be used to prevent you needing to go\n// through activating each scene one by one.\n(async () => {\n  ScenePacker.PromptForInstance().then(async instance => {\n    if (!instance?.moduleName) {\n      return;\n    }\n\n    const scenes = [];\n    for (const scene of game.scenes) {\n      if (ScenePacker.HasPackedData(scene, instance.moduleName)) {\n        scenes.push(scene);\n      }\n    }\n    if (!scenes.length) {\n      return ui.notifications.info(`There are no scenes that need unpacking in \\\"${instance.moduleName}\\\".`);\n    }\n\n    ui.notifications.info(`Unpacking ${scenes.length} scenes in \\\"${instance.moduleName}\\\".`);\n    console.log(`Unpacking ${scenes.length} scenes in \\\"${instance.moduleName}\\\".`);\n    for (const scene of scenes) {\n      await instance.ProcessScene(scene, {showLinkedJournal: false, showUI: false});\n    }\n    ui.notifications.info(`Done. Unpacked ${scenes.length} scenes in \\\"${instance.moduleName}\\\".`);\n    console.log(`Done. Unpacked ${scenes.length} scenes in \\\"${instance.moduleName}\\\".`);\n  });\n})();","folder":null,"sort":0,"permission":{"default":0,"MRUsyvFBYyl6GZtk":3},"flags":{"core":{"sourceId":"Macro.cRYEZq7UjvUNZ8g5"},"scene-packer":{"sourceId":"Macro.cRYEZq7UjvUNZ8g5"}},"_id":"ioes04Iar77wRikC"}
{"name":"Show asset report","type":"script","author":"ajyvWN29UcpExc6d","img":"icons/svg/hazard.svg","scope":"global","command":"// This macro shows an asset report that details the assets\n// in this world and whether they have \"external\" dependencies.\n//\n// Use it to help determine whether your packaged module will\n// result in broken assets (images, sounds etc.).\n\nnew ScenePacker.AssetReport();","folder":null,"sort":0,"permission":{"default":0,"ajyvWN29UcpExc6d":3},"flags":{"core":{"sourceId":"Macro.CIKJ4iAmyMvhtptI"}},"_id":"mkNKay70v790Fu4h"}
{"_id":"qIQ9ehnHD47ekm1l","name":"Reset world Scene Packer prompts","type":"script","author":"Rt2brfVFebtCuVnc","img":"icons/svg/hanging-sign.svg","scope":"global","command":"// This macro will prompt you to select your module and then\n// will reset the settings values to allow retriggering of\n// the prompts when you first install a world.\n//\n// These prompts are the \"Yes import all\", \"Let me choose\" etc.\n\nlet content = '';\nlet instances = Object.keys(ScenePacker.instances);\nif (instances.length) {\n  content = '<p>Select the module that you want to reset prompting for:</p>';\n  content += '<select id=\"module-name\">';\n  instances.forEach(m => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  content += '</select>';\n  content += '<p>Refresh the world after resetting.</p>'\n} else {\n  content = '<p>There are no modules registered with Scene Packer currently available.</p>';\n}\nlet d = new Dialog({\n  title: 'Select instance',\n  content: content,\n  buttons: {\n    relink: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'Reset',\n      callback: (html) => {\n        let moduleName = html.find('#module-name')[0].value;\n        if (!moduleName) {\n          return;\n        }\n        game.settings.set(moduleName, 'imported', '0.0.0');\n        game.settings.set(moduleName, 'prompted', '0.0.0');\n        game.settings.set(moduleName, 'showWelcomePrompts', true);\n        if (canvas?.scene?.getFlag(moduleName, 'imported')) {\n          canvas.scene.setFlag(moduleName, 'imported', '0.0.0')\n        }\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n    },\n  },\n});\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"Rt2brfVFebtCuVnc":3},"flags":{"core":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"},"scene-packer":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"}}}
