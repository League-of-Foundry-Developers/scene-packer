{"_id":"DMRaZaBX7hr2TNoZ","name":"Show scene performance report","permission":{"default":0,"PeG0c6MgW8W2NzFs":3},"type":"script","flags":{"core":{"sourceId":"Macro.frlsbESCLKNBjrYG"}},"scope":"global","command":"ScenePacker.ShowPerformanceReport();","author":"PeG0c6MgW8W2NzFs","img":"icons/svg/upgrade.svg","actorIds":[]}
{"_id":"IeiuU5QSNgwJygTL","name":"Relink compendium journal entries","permission":{"default":0,"PeG0c6MgW8W2NzFs":3},"type":"script","flags":{"core":{"sourceId":"Macro.1vPAJ3r886Km4CSi"}},"scope":"global","command":"// This macro will let you choose your module and will check each Journal in your module's compendium in an attempt to update the link to the equivalent compendium version.\n// Asks you whether you want to operate in a \"dry run\" mode, where no changes are made.\nScenePacker.PromptRelinkJournalEntries()","author":"PeG0c6MgW8W2NzFs","img":"icons/svg/book.svg","actorIds":[]}
{"name":"Verify compendiums","permission":{"default":0,"mbCwGYCE3HWbprPI":3},"type":"script","flags":{"core":{"sourceId":"Macro.3rDuAhLT7oj2DTzz"},"scene-packer":{"sourceId":"Macro.3rDuAhLT7oj2DTzz"}},"scope":"global","command":"// This macro checks the compendium packs for a given module to ensure that it contains all of the data required for Scene Packer to operate correctly.\n\nlet content = '';\nlet instances = Object.keys(ScenePacker.instances);\nif (instances.length) {\n  content = '<p>Select the module that you want to verify compendium entries for:</p>';\n  content += '<select id=\"module-name\">';\n  instances.forEach(m => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  content += '</select>';\n} else {\n  content = '<p>There are no modules registered with Scene Packer currently available.</p>';\n}\nlet d = new Dialog({\n  title: 'Select instance',\n  content: content,\n  buttons: {\n    relink: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'Verify',\n      callback: async (html) => {\n        let moduleName = html.find('#module-name')[0].value;\n        if (!moduleName) {\n          return;\n        }\n        const packs = game.packs.filter(p => p.collection.startsWith(`${moduleName}.`));\n        if (!packs.length) {\n          return;\n        }\n\n        const missingData = new Set();\n        for (let i = 0; i < packs.length; i++) {\n          const pack = packs[i];\n          let entities;\n          let type;\n          if (isNewerVersion(game.data.version, '0.7.9')) {\n            entities = await pack.getDocuments();\n            type = pack.documentName;\n          } else {\n            entities = await pack.getContent();\n            type = pack.entity;\n          }\n          if (!entities?.length) {\n            continue;\n          }\n          for (let j = 0; j < entities.length; j++) {\n            const entity = entities[j];\n            let reference = {\n              name: entity.name,\n              type\n            };\n            if (!entity.getFlag('scene-packer', 'sourceId')) {\n              missingData.add(reference);\n            }\n            if (type === 'Scene' && !entity.getFlag('scene-packer', 'source-module')) {\n              missingData.add(reference);\n            }\n          }\n        }\n        let content = '';\n        if (!missingData.size) {\n          content = '<p>All required compendium data is present and valid.</p>';\n        } else {\n          content = '<p>The following entities have invalid data.</p>';\n          content += '<p>In most cases, re-exporting the item to the compendium will fix the data mapping.</p>';\n          content += '<ul>';\n          Array.from(missingData).sort((a, b) => {\n            if (a.type === b.type) {\n              return a.name.localeCompare(b.name);\n            }\n            return a.type.localeCompare(b.type);\n          }).forEach(e => {\n            content += `<li>${e.type}: ${e.name}</li>`;\n          })\n          content += '</ul>';\n        }\n        return Dialog.prompt({\n          title: 'Results',\n          content: content,\n          label: 'Close',\n          callback: () => {}\n        });\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n    },\n  },\n});\nd.render(true);","author":"mbCwGYCE3HWbprPI","img":"icons/svg/eye.svg","actorIds":[],"_id":"VJInwXBdqb4MnJHw"}
{"_id":"qIQ9ehnHD47ekm1l","name":"Reset world Scene Packer prompts","permission":{"default":0,"Rt2brfVFebtCuVnc":3},"type":"script","flags":{"core":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"},"scene-packer":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"}},"scope":"global","command":"// This macro will prompt you to select your module and then\n// will reset the settings values to allow retriggering of\n// the prompts when you first install a world.\n\nlet content = '';\nlet instances = Object.keys(ScenePacker.instances);\nif (instances.length) {\n  content = '<p>Select the module that you want to reset prompting for:</p>';\n  content += '<select id=\"module-name\">';\n  instances.forEach(m => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  content += '</select>';\n  content += '<p>Refresh the world after resetting.</p>'\n} else {\n  content = '<p>There are no modules registered with Scene Packer currently available.</p>';\n}\nlet d = new Dialog({\n  title: 'Select instance',\n  content: content,\n  buttons: {\n    relink: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'Reset',\n      callback: (html) => {\n        let moduleName = html.find('#module-name')[0].value;\n        if (!moduleName) {\n          return;\n        }\n        game.settings.set(moduleName, 'imported', '0.0.0');\n        game.settings.set(moduleName, 'prompted', '0.0.0');\n        game.settings.set(moduleName, 'showWelcomePrompts', true);\n        if (canvas?.scene?.getFlag(moduleName, 'imported')) {\n          canvas.scene.setFlag(moduleName, 'imported', '0.0.0')\n        }\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n    },\n  },\n});\nd.render(true);","author":"Rt2brfVFebtCuVnc","img":"icons/svg/terror.svg","actorIds":[]}
{"_id":"qIQ9ehnHD47ekm1l","name":"Reset world Scene Packer prompts","permission":{"default":0,"Rt2brfVFebtCuVnc":3},"type":"script","flags":{"core":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"},"scene-packer":{"sourceId":"Macro.8Ed2EtweXHL8UrPq"}},"scope":"global","command":"// This macro will prompt you to select your module and then\n// will reset the settings values to allow retriggering of\n// the prompts when you first install a world.\n\nlet content = '';\nlet instances = Object.keys(ScenePacker.instances);\nif (instances.length) {\n  content = '<p>Select the module that you want to reset prompting for:</p>';\n  content += '<select id=\"module-name\">';\n  instances.forEach(m => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  content += '</select>';\n  content += '<p>Refresh the world after resetting.</p>'\n} else {\n  content = '<p>There are no modules registered with Scene Packer currently available.</p>';\n}\nlet d = new Dialog({\n  title: 'Select instance',\n  content: content,\n  buttons: {\n    relink: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'Reset',\n      callback: (html) => {\n        let moduleName = html.find('#module-name')[0].value;\n        if (!moduleName) {\n          return;\n        }\n        game.settings.set(moduleName, 'imported', '0.0.0');\n        game.settings.set(moduleName, 'prompted', '0.0.0');\n        game.settings.set(moduleName, 'showWelcomePrompts', true);\n        if (canvas?.scene?.getFlag(moduleName, 'imported')) {\n          canvas.scene.setFlag(moduleName, 'imported', '0.0.0')\n        }\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n    },\n  },\n});\nd.render(true);","author":"Rt2brfVFebtCuVnc","img":"icons/svg/terror.svg","actorIds":[]}
{"_id":"VJInwXBdqb4MnJHw","name":"Verify compendiums","permission":{"default":0,"mbCwGYCE3HWbprPI":3},"type":"script","flags":{"core":{"sourceId":"Macro.3rDuAhLT7oj2DTzz"},"scene-packer":{"sourceId":"Macro.3rDuAhLT7oj2DTzz"}},"scope":"global","command":"// This macro checks the compendium packs for a given module to ensure that it contains all of the data required for Scene Packer to operate correctly.\n\nlet content = '';\nlet instances = Object.keys(ScenePacker.instances);\nif (instances.length) {\n  content = '<p>Select the module that you want to verify compendium entries for:</p>';\n  content += '<select id=\"module-name\">';\n  instances.forEach(m => {\n    content += `<option value=\"${m}\">${m}</option>`;\n  });\n  content += '</select>';\n} else {\n  content = '<p>There are no modules registered with Scene Packer currently available.</p>';\n}\nlet d = new Dialog({\n  title: 'Select instance',\n  content: content,\n  buttons: {\n    relink: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'Verify',\n      callback: async (html) => {\n        let moduleName = html.find('#module-name')[0].value;\n        if (!moduleName) {\n          return;\n        }\n        const packs = game.packs.filter(p => p.collection.startsWith(`${moduleName}.`));\n        if (!packs.length) {\n          return;\n        }\n\n        const missingData = new Set();\n        for (let i = 0; i < packs.length; i++) {\n          const pack = packs[i];\n          let entities;\n          let type;\n          if (isNewerVersion(game.data.version, '0.7.9')) {\n            entities = await pack.getDocuments();\n            type = pack.documentName;\n          } else {\n            entities = await pack.getContent();\n            type = pack.entity;\n          }\n          if (!entities?.length) {\n            continue;\n          }\n          for (let j = 0; j < entities.length; j++) {\n            const entity = entities[j];\n            let reference = {\n              name: entity.name,\n              type\n            };\n            if (!entity.getFlag('scene-packer', 'sourceId')) {\n              missingData.add(reference);\n            }\n            if (type === 'Scene' && !entity.getFlag('scene-packer', 'source-module')) {\n              missingData.add(reference);\n            }\n          }\n        }\n        let content = '';\n        if (!missingData.size) {\n          content = '<p>All required compendium data is present and valid.</p>';\n        } else {\n          content = '<p>The following entities have invalid data.</p>';\n          content += '<p>In most cases, re-exporting the item to the compendium will fix the data mapping.</p>';\n          content += '<ul>';\n          Array.from(missingData).sort((a, b) => {\n            if (a.type === b.type) {\n              return a.name.localeCompare(b.name);\n            }\n            return a.type.localeCompare(b.type);\n          }).forEach(e => {\n            content += `<li>${e.type}: ${e.name}</li>`;\n          })\n          content += '</ul>';\n        }\n        return Dialog.prompt({\n          title: 'Results',\n          content: content,\n          label: 'Close',\n          callback: () => {}\n        });\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n    },\n  },\n});\nd.render(true);","author":"mbCwGYCE3HWbprPI","img":"icons/svg/eye.svg","actorIds":[]}
