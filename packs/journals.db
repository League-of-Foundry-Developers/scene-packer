{"_id":"3yWnmRLORfI3Wa6x","name":"Read Me","permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"folder":"","flags":{"core":{"sourceId":"JournalEntry.0Lr0QUSE5j1xgzuc"}},"content":"<h1>Library: Scene Packer</h1>\n<p>Scene Packer is a library that is primarily used by developers to assist with packaging an adventure module for distribution to other GMs. As a GM there is very little you need to do yourself, other than have the module installed.</p>\n<h2>Usage as a GM</h2>\n<p>@Compendium[scene-packer.journals.6W7WVWeexVsFhtSQ]{Usage as a GM}</p>\n<h2>Usage as a Developer</h2>\n<p>@Compendium[scene-packer.journals.5H4wVwtnrbhZE8Ko]{Usage as a Developer}</p>"}
{"_id":"5H4wVwtnrbhZE8Ko","name":"Usage as a Developer","permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"folder":"","flags":{"core":{"sourceId":"JournalEntry.IJZq4OejTztoFg23"}},"content":"<h1>Using Scene Packer as a Developer</h1>\n<p>Scene Packer is a library to help you package up Scenes and Adventures to solve the following issues:</p>\n<ul>\n<li>Scene Journal Pins not linking to the correct Journal after importing a Scene</li>\n<li>Actor tokens on a Scene not linking to the Actor after importing</li>\n<li>Relink journal entries to compendium entities (to fix the broken links after exporting from your World to your Compendium and then importing into a different world)</li>\n</ul>\n<h2>Using Scene Packer in your Module</h2>\n<p>To use the Scene Packer as part of your module you will need to add it as a dependency in your <code>module.json</code> file.</p>\n<pre><code>\"dependencies\": [\n  {\n    \"name\": \"scene-packer\",\n    \"manifest\": \"https://raw.githubusercontent.com/League-of-Foundry-Developers/scene-packer/master/module.json\"\n  }\n]</code></pre>\n<h2>Module code requirements</h2>\n<p>To unpack your scenes automatically when first viewed by a user, include the following in your module javascript, updating the variable names where appropriate.</p>\n<p>@Compendium[scene-packer.journals.d1ZkWfANsQYKSuty]{Example module javascript}</p>\n<h2>Packing your Scenes</h2>\n<p>To pack your scene ready for distribution:</p>\n<ul>\n<li>Enable the <code>Scene Packer context menu</code> in Module Settings.</li>\n<li>Build your scene as normal, adding Actors and Journal Pins where you'd like.</li>\n<li>Export your Actors/Journals/Roll Tables/Items/Macros to your compendiums as normal.</li>\n<li>Run the script to <code>Update Journal links</code> to fix up the journal compendium linking (see section below)</li>\n<li>Re-export your Journals to compendiums, be sure to select the \"Merge By Name\" option to prevent the IDs from changing (and therefore re-breaking the links)</li>\n<li>Right click on your Scene in the Scenes Directory and choose \"Pack Scene Data\".</li>\n<li>Export your Scene to your compendium.</li>\n</ul>\n<p><img src=\"https://github.com/League-of-Foundry-Developers/scene-packer/raw/main/scene-context-menu.png\" alt=\"Scene context menu\" width=\"295\" height=\"446\" /></p>\n<h2>Updating Journal links</h2>\n<p>When you build an adventure module, it's a painful process updating all of your Journal references to link to the compendium versions. You can simplify this by running the following command in your browser console putting in your appropriate module name (as per your manifest json name):</p>\n<pre>await ScenePacker.RelinkJournalEntries('module-name', {dryRun: false});</pre>\n<p>Alternatively, you can run the macro: @Compendium[scene-packer.macros.IeiuU5QSNgwJygTL]{Relink compendium journal entries}</p>\n<p>This will automatically go through the Journal compendiums that belong to your module, and change the reference links to the compendium versions. For example, if you had a link to <code>@​Actor[alvhCr52HIrWmoez]{Commoner}</code> it would change it to <code>@​Compendium[your-module.actors.lOBiqShvkT83eGzY]{Commoner}</code> using your module and compendium names and ID references. Note that there is a zero-width character in this journal markup purely to prevent the links from rendering as links, allowing you to see the code.</p>\n<p>&nbsp;</p>\n<h2>Macros</h2>\n<p>There are several Macros included in the <code>Library: Scene Packer</code> compendium entry.</p>\n<p>&nbsp;</p>\n<h2>Help! I have an issue!</h2>\n<p>Please report issues via the&nbsp;<a href=\"https://foundryvtt.com/packages/bug-reporter\" target=\"_blank\" rel=\"noopener\">Bug Reporter</a>.</p>\n<p>&nbsp;</p>"}
{"_id":"6W7WVWeexVsFhtSQ","name":"Usage as a GM","permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"folder":"","flags":{},"content":"<h1>Using Scene Packer as a GM</h1>\n<p>Using modules that have been packed with Scene Packer is very straight forward. When you first enable the adventure module it will prompt you asking if you want to import all of the Scenes. Selecting yes will import all of the Scenes into a folder, unpack them and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<p>Selecting \"Let me choose\" will open the Scene compendium allowing you to manually import just the Scenes you want. The first time you view that Scene, it will unpack itself automatically and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<p>If you choose the \"Do not ask again\" option and now want to import the Scenes, you can manually import any of the Scenes from the module Compendium. The first time you view that Scene it will unpack itself automatically and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<h2>What is this \"Pack Scene Data\" option I see?</h2>\n<p>This option is used by module developers. You should not choose this option, otherwise you will duplicate some data when you next load the scene. If you accidentally click it, simply choose the \"Clear Packed Scene Data\" from the same context menu. Consider disabling the module setting called \"Enable Scene Packer context menu\".</p>\n<p>&nbsp;</p>\n<h2>Help! I have an issue!</h2>\n<p>Please report issues via the <a href=\"https://foundryvtt.com/packages/bug-reporter\" target=\"_blank\" rel=\"noopener\">Bug Reporter</a>.</p>"}
{"_id":"d1ZkWfANsQYKSuty","name":"Example module javascript","permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"folder":"","flags":{"core":{"sourceId":"JournalEntry.8xXIOgLTdW6BINJr"}},"content":"<p>The following is an example of the javascript that you would put into your module, adjusting names as appropriate.</p>\n<hr />\n<pre><code>const adventureName = 'The Name of Your Adventure or Collection';\nconst moduleName = 'your-module-name-as-defined-in-your-manifest-file';\n\n/**\n * welcomeJournal (if set) will automatically be imported and opened after the first activation of a scene imported from the module compendium.\n * Set to the following to disable:\n *   const welcomeJournal = '';\n */\nconst welcomeJournal = 'A1. Adventure Introduction';\n/**\n * additionalJournals will automatically be imported.\n * Set to the following to disable:\n *   const additionalJournals = [];\n */\nconst additionalJournals = ['A2. Adventure Overview'];\n/**\n * creaturePacks is a list of compendium packs to look in for Actors by name (in prioritised order).\n * The first entry here assumes that you have an Actor pack in your module with the \"name\" of \"actors\".\n * Set to the following to disable:\n *   const creaturePacks = [];\n */\nconst creaturePacks = [`${moduleName}.actors`, 'dnd5e.monsters'];\n/**\n * journalPacks is a list of compendium packs to look in for Journals by name (in prioritised order).\n * The first entry here assumes that you have a Journal pack in your module with the \"name\" of \"journals\".\n * Set to the following to disable:\n *   const journalPacks = [];\n */\nconst journalPacks = [`${moduleName}.journals`];\n/**\n * macroPacks is a list of compendium packs to look in for Macros by name (in prioritised order).\n * The first entry here assumes that you have a Macro pack in your module with the \"name\" of \"macros\".\n * Set to the following to disable:\n *   const macroPacks = [];\n */\nconst macroPacks = [`${moduleName}.macros`];\n\nHooks.once('scenePackerReady', ScenePacker =&gt; {\n  // Initialise the Scene Packer with your adventure name and module name\n  let packer = ScenePacker.Initialise({<br />    adventureName,<br />    moduleName,\n    creaturePacks,\n    journalPacks,\n    macroPacks,\n    welcomeJournal,\n    additionalJournals,\n    allowImportPrompts: true, // Set to false if you don't want the popup\n  });\n});</code></pre>"}
